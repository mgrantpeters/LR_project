}
}
summary
for (x in 10:37){
print(colnames(data)[x])
m = lm(as.formula(paste(data[[x]]) ~ TS.PUTM + RIN), data = data)
summary(m)
#plot(data[[x]], data$TS.PUTM)
sink(paste0("TelomereLength_project/", colnames(data)[x], "lm-outputs.csv"))
print(colnames(data)[x])
print(summary(m))
sink()
df = glance(m)
df = df %>% add_column(gene = paste(colnames(data)[x]), .before = "r.squared")
if (x==10){
summary = df
} else {
summary = bind_rows(summary, df)
}
}
summary
typeof(df)
data.frame(summary)
write.csv(data.frame(summary), 'TelomereLength_project/summary_statistics.csv')
for (x in 10:37){
print(colnames(data)[x])
m = lm(as.formula(TS.PUTM ~ paste(data[[x]]) + RIN), data = data)
summary(m)
#plot(data[[x]], data$TS.PUTM)
#sink(paste0("TelomereLength_project/", colnames(data)[x], "lm-outputs_predictlen.csv"))
#print(colnames(data)[x])
#print(summary(m))
#sink()
df = glance(m)
df = df %>% add_column(gene = paste(colnames(data)[x]), .before = "r.squared")
if (x==10){
summary = df
} else {
summary = bind_rows(summary, df)
}
}
summary
lm(as.formula(TS.PUTM ~ paste(data[[x]]) + RIN), data = data)
m = lm(as.formula(TS.PUTM ~ paste(data[[x]]) + RIN), data = data)
summary(m)
m = lm(as.formula(data$TS.PUTM ~ data[[x]] + data$RIN))
summary(m)
for (x in 10:37){
print(colnames(data)[x])
m = lm(as.formula(data$TS.PUTM ~ data[[x]] + data$RIN))
summary(m)
#plot(data[[x]], data$TS.PUTM)
#sink(paste0("TelomereLength_project/", colnames(data)[x], "lm-outputs_predictlen.csv"))
#print(colnames(data)[x])
#print(summary(m))
#sink()
df = glance(m)
df = df %>% add_column(gene = paste(colnames(data)[x]), .before = "r.squared")
if (x==10){
summary = df
} else {
summary = bind_rows(summary, df)
}
}
summary
m = lm(TS.PUTM ~ Age + RIN, data = data)
summary(m)
m = lm(as.formula(paste(data[[26]]) ~ TS.PUTM + RIN + Age), data = data)
summary(m)
m = lm(as.formula(paste(data[[26]]) ~ TS.PUTM + RIN + Age + Sex + Brain.pH), data = data)
summary(m)
m = lm(as.formula(TS.PUTM ~ paste(data[[26]]) + RIN + Age + Sex + Brain.pH), data = data)
summary(m)
m = lm(as.formula(data$TS.PUTM ~ paste(data[[26]]) + data$RIN + data$Age + data$Sex + data$Brain.pH), data = data)
summary(m)
m = lm(as.formula(data$TS.PUTM ~ paste(data[[26]]) + data$RIN + data$Age + data$Sex + data$Brain.pH))
summary(m)
m = lm(data$TS.PUTM ~ paste(data[[26]]) + data$RIN + data$Age + data$Sex + data$Brain.pH)
summary(m)
m = lm(TS.PUTM ~ Age + RIN, data = data)
summary(m)
m = lm(as.formula(data$TS.PUTM ~ data[[x]] + data$RIN))
summary(m0)
summary(m)
m = lm(as.formula(data$TS.PUTM ~ data[[x]] + data$RIN + data$Brain.pH))
summary(m)
m = lm(as.formula(data$TS.PUTM ~ data[[x]] + data$RIN + data$Brain.pH + Sex))
m = lm(as.formula(data$TS.PUTM ~ data[[x]] + data$RIN + data$Brain.pH + data$Sex))
summary(m)
m = lm(as.formula(data$TS.PUTM ~ data[[x]] + data$RIN + data$Sex))
summary(m)
m = lm(as.formula(data$Age ~ data[[x]] + data$RIN + data$Sex))
summary(m)
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN + data$Sex))
summary(m)
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN))
summary(m)
library(dplyr)
library(broom)
library(lme4)
library(tibble)
data = read.csv("TelomereLength_project/data_input.csv")
for (x in 10:37){
print(colnames(data)[x])
m = lm(as.formula(data$TS.PUTM ~ data[[x]] + data$RIN + data$Sex))
summary(m)
#plot(data[[x]], data$TS.PUTM)
sink(paste0("TelomereLength_project/", colnames(data)[x], "lm-outputs.csv"))
print(colnames(data)[x])
print(summary(m))
sink()
df = glance(m)
df = df %>% add_column(gene = paste(colnames(data)[x]), .before = "r.squared")
if (x==10){
summary = df
} else {
summary = bind_rows(summary, df)
}
}
write.csv(data.frame(summary), 'TelomereLength_project/summary_statistics.csv')
library(dplyr)
library(broom)
library(lme4)
library(tibble)
data = read.csv("TelomereLength_project/data_input.csv")
for (x in 10:37){
print(colnames(data)[x])
m = lm(as.formula(paste(data[[x]]) ~ TS.PUTM + RIN), data = data)
summary(m)
#plot(data[[x]], data$TS.PUTM)
sink(paste0("TelomereLength_project/", colnames(data)[x], "lm-outputs.csv"))
print(colnames(data)[x])
print(summary(m))
sink()
df = glance(m)
df = df %>% add_column(gene = paste(colnames(data)[x]), .before = "r.squared")
if (x==10){
summary = df
} else {
summary = bind_rows(summary, df)
}
}
write.csv(data.frame(summary), 'TelomereLength_project/summary_statistics.csv')
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN))
summary(m)
sink(paste0("TelomereLength_project/age_lm-outputs.csv"))
print(summary(m))
sink()
library(dplyr)
library(broom)
library(lme4)
library(tibble)
data = read.csv("TelomereLength_project/data_input.csv")
for (x in 10:37){
print(colnames(data)[x])
m = lm(as.formula(paste(data[[x]]) ~ TS.PUTM + RIN), data = data)
summary(m)
#plot(data[[x]], data$TS.PUTM)
sink(paste0("TelomereLength_project/", colnames(data)[x], "lm-outputs.csv"))
print(colnames(data)[x])
print(summary(m))
sink()
df = glance(m)
df = df %>% add_column(gene = paste(colnames(data)[x]), .before = "r.squared")
if (x==10){
summary = df
} else {
summary = bind_rows(summary, df)
}
}
write.csv(data.frame(summary), 'TelomereLength_project/summary_statistics.csv')
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN))
summary(m)
sink(paste0("TelomereLength_project/age_lm-outputs.csv"))
print(summary(m))
sink()
m = lm(as.formula(data$TS.PUTM ~ data[[26]] + data$RIN)
summary(m)
library(dplyr)
library(broom)
library(lme4)
library(tibble)
data = read.csv("TelomereLength_project/data_input.csv")
m = lm(as.formula(data$TS.PUTM ~ data[[26]] + data$RIN)
)
summary(m)
lm(as.formula(data$TS.PUTM ~ data[[26]] + data$RIN + data$Sex))
summary(m)
m = lm(as.formula(data$TS.PUTM ~ data[[26]] + data$RIN + data$Sex + data$Age))
summary(m)
m = lm(as.formula(data$TS.PUTM ~ data[[26]] + data$RIN + data$Sex))
summary(m)
colnames(data)[x]
print(colnames(data)[x])
x=26
print(colnames(data)[x])
m = lm(as.formula(data$TS.PUTM ~ data[[26]] + data$RIN + data$Sex + data$Age))
summary(m)
#plot(data[[x]], data$TS.PUTM)
sink(paste0("TelomereLength_project/", colnames(data)[x], "lm-outputs.csv"))
print(colnames(data)[x])
print(summary(m))
sink()
df = glance(m)
df = df %>% add_column(gene = paste(colnames(data)[x]), .before = "r.squared")
df
library(dplyr)
library(broom)
library(lme4)
library(tibble)
data = read.csv("TelomereLength_project/data_input.csv")
for (x in 10:37){
x=26
print(colnames(data)[x])
m = lm(as.formula(data$TS.PUTM ~ data[[26]] + data$RIN + data$Sex + data$Age))
summary(m)
#plot(data[[x]], data$TS.PUTM)
sink(paste0("TelomereLength_project/", colnames(data)[x], "lm-outputs.csv"))
print(colnames(data)[x])
print(summary(m))
sink()
df = glance(m)
df = df %>% add_column(gene = paste(colnames(data)[x]), .before = "r.squared")
if (x==10){
summary = df
} else {
summary = bind_rows(summary, df)
}
}
write.csv(data.frame(summary), 'TelomereLength_project/summary_statistics.csv')
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN + data$Sex))
summary(m)
sink(paste0("TelomereLength_project/age_lm-outputs.csv"))
print(summary(m))
sink()
library(dplyr)
library(broom)
library(lme4)
library(tibble)
data = read.csv("TelomereLength_project/data_input.csv")
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN + data$Sex))
summary(m)
sink(paste0("TelomereLength_project/age_lm-outputs.csv"))
print(summary(m))
sink()
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN + data$Sex))
summary(m)
sink(paste0("TelomereLength_project/age_lm-outputs.csv"))
print(summary(m))
sink()
sink(paste0("TelomereLength_project/age_lm-outputs.csv"))
print(summary(m))
sink()
as.formula(data[[x]]
)
data[[x]])
data[[x]]
data[x]
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN + data$Sex))
summary(m)
sink(paste0("TelomereLength_project/age_lm-outputs.csv"))
print(summary(m))
sink()
full_results$bootstrap_data[,15]
library("EWCE")
library("biomaRt")
library("ggplot2")
set.seed(1234)
load("C:/Users/melis/Downloads/ctd_aibsMultipleCrtxSmrtSeq.rda")  #Load CTD data
n = 10000
#################------------------- Telomere Length
#Load target gene list
TelLength = c("PARP1", "SENP7", "TERC", "MOB1B", "NAF1", "TERT", "PRRC2A", "CARMIL1", "POT1", "STN1", "ATM", "DCAF4", "TERF2", "MPHOSPH6", "RFWD3", "ZNF208", "ZBTB46", "STMN3", "RTEL1")
OxPhos = c("ENO1", "ENO2", "ENO3", "ENTPD5", "GAPDHS", "GAPDH", "GCK", "GPD1", "GPI", "HIF1A", "HK1", "HK2", "HK3", "HTR2A", "IGF1", "INSR", "MYC", "P2RX7", "PFKFB1", "PFKFB2", "PFKFB3", "PFKFB4", "PFKL", "PFKM", "PFKP", "PGAM1", "PGAM2", "PGK1", "PKLR", "PPP2R5D", "PRKAA1", "PRKAA2", "TPI1", "INS", "ALDOA", "ALDOB", "ALDOC", "ARNT", "NDUFA10", "NDUFA1", "NDUFA2", "NDUFA3", "NDUFA4", "NDUFA5", "NDUFA6", "NDUFA7", "NDUFA8", "NDUFA9", "NDUFAB1", "NDUFB10", "NDUFB1", "NDUFB2", "NDUFB3", "NDUFB4", "NDUFB5", "NDUFB6", "NDUFB7", "NDUFB8", "NDUFB9", "NDUFC1", "NDUFC2", "NDUFS4", "NDUFS5", "NDUFS6", "NDUFV3", "NDUFAF1", "NDUFS1", "NDUFS2", "NDUFS3", "NDUFS7", "NDUFS8", "NDUFV1", "NDUFV2", "SDHC", "UQCR10", "UQCRB", "UQCRC1", "UQCRC2", "UQCRH", "COX10", "COX15", "COX4I1", "COX4I2", "COX5A", "COX8A", "COX8C", "ATPF1C", "ATP5F1D", "ATP7A", "LEXM", "CHCHD10", "COQ7", "COQ9", "CYCS", "DLD", "DNAJC15", "FXN", "GADD45GIP1", "NIPSNAP2" , "MECP2", "MLXIPL", "MSH2", "MYOG", "PARK7", "PINK1", "PMPCB", "PPIF", "SDHAF2", "SLC25A23", "SLC25A33", "SNCA", "SURF1", "TAZ", "UQCRHL", "VCP", "ACTN3", "AK2", "APOC3")
TelMaint = c("POT1", "TERF1", "TERF2", "ACD", "TINF2", "TERF2IP", "CTC1", "STN1", "TEN1", "RIF1", "RTEL1", "ZBTB48")
TelBio = c("TERT", "TEP1", "TERC", "WRAP53", "DKC1", "NOP10", "GAR1", "NHP2", "NAF1", "PARN")
Stress = c("FKBP5", "CRH", "HSPA2", "NR3C1", "NR3C2", "PPARA", "PPARG", "PPARD", "RXRA", "NPY", "GPR37")
full_results <- EWCE::bootstrap_enrichment_test(sct_data = ctd,
sctSpecies = "human",
genelistSpecies = "human",
hits = c(TelLength, OxPhos, TelMaint, TelBio, Stress),
reps = n,
annotLevel = 1,
geneSizeControl = TRUE)
hist(full_results$bootstrap_data[,15])
hist(full_results$bootstrap_data[,2])
hist(full_results$bootstrap_data[,3])
hist(full_results$bootstrap_data[,4])
hist(full_results$bootstrap_data[,5])
hist(full_results$bootstrap_data[,6])
hist(full_results$bootstrap_data[,7])
hist(full_results$bootstrap_data[,8])
hist(full_results$bootstrap_data[,9])
hist(full_results$bootstrap_data[,10])
hist(full_results$bootstrap_data[,11])
hist(full_results$bootstrap_data[,12])
hist(full_results$bootstrap_data[,13])
hist(full_results$bootstrap_data[,14])
hist(full_results$bootstrap_data[,15])
hist(full_results$bootstrap_data[,16])
hist(full_results$bootstrap_data[,17])
hist(full_results$bootstrap_data[,18])
n=10
full_results$bootstrap_data[,n]
seq(from = 1, to = 5, by = 1)
for (x in 2:13){
t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
}
for (x in 2:13){
results = t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
print(results)
}
for (n in 2:13){
results = t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
print(results)
}
var.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n])
results
results$p.value
results$p.value/11
results$p.value/100000
full_results$bootstrap_data
full_results
for (n in 2:13){
var.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n])
results = t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
print(results$p.value)
}
for (n in 2:13){
var.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n])
results = t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
print(results$p.value/11)
}
for (n in 2:13){
Fres = var.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n])
print(Fres)
results = t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
print(results$p.value/11)
}
for (n in 2:13){
Fres = var.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n])
print(Fres)
results = t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
print(results$p.value/11)
}
for (n in 2:13){
Fres = var.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n])
print(Fres)
results = t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
print(results)
print(results$p.value/11)
}
(.packages())
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("hadley/devtools")
install.packages("devtools")
devtools::install_github("hadley/devtools")
devtools::install_github("heiniglab/scPower")
devtools::install_github("hadley/devtools")
install.packages("devtools")
devtools::install_github("hadley/devtools")
install.packages("devtools")
devtools::install_github("hadley/devtools")
library('devtools')
library(devtools)
sessionInfo()
devtools::install_github("heiniglab/scPower")
devtools::install_github("hadley/devtools")
update.packages('cli')
devtools::install_github("hadley/devtools")
update.packages(cli)
install.packages('cli')
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
devtools::install_github("hadley/devtools")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("hadley/devtools")
install.packages("htmltools")
install.packages("htmltools")
devtools::install_github("hadley/devtools")
devtools::install_github("heiniglab/scPower")
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 50,
cell.type.frac=0.1,nSamples=100)
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 75,
cell.type.frac=0.1,nSamples=100)
scPower::power.detect.celltype(nCells=1000,min.num.cells = 50,
cell.type.frac=0.1,nSamples=100)
scPower::power.detect.celltype(nCells=200,min.num.cells = 50,
cell.type.frac=0.1,nSamples=100)
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 50,
cell.type.frac=0.1,nSamples=100)
0.1*752
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 100,
cell.type.frac=0.1,nSamples=196)
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 75,
cell.type.frac=0.1,nSamples=196)
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 50,
cell.type.frac=0.1,nSamples=196)
scPower::power.detect.celltype(nCells=200,min.num.cells = 50,
cell.type.frac=0.1,nSamples=196)
scPower::power.detect.celltype(nCells=2995,min.num.cells = 50,
cell.type.frac=0.1,nSamples=69)
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 50,
cell.type.frac=0.1,nSamples=69)
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 75,
cell.type.frac=0.1,nSamples=69)
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 150,
cell.type.frac=0.1,nSamples=69)
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 150,
cell.type.frac=0.1,nSamples=69)
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 100,
cell.type.frac=0.1,nSamples=69)
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 150,
cell.type.frac=0.1,nSamples=69)
scPower::power.detect.celltype(nCells=3000,min.num.cells = 50,
cell.type.frac=0.1,nSamples=69)
scPower::power.detect.celltype(nCells=3000,min.num.cells = 150,
cell.type.frac=0.1,nSamples=69)
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 10,
cell.type.frac=0.02,nSamples=100)
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 50,
cell.type.frac=0.1,nSamples=21)
711*21
scPower::number.cells.detect.celltype(prob.cut=0.95,min.num.cells = 75,
cell.type.frac=0.1,nSamples=21)
gene = read.csv("processed_data/03-LR_network_visualisation/louvain_largest_cluster_0.1.csv", row.names = 1)
genelist = gene$X0
gene.df <- bitr(genelist, fromType = "SYMBOL",
toType = c("ENTREZID"),
OrgDb = org.Hs.eg.db)
sorted = sort(unlist(as.numeric(gene.df$ENTREZID)), decreasing = TRUE)
enrich_go = enrichGO(gene = unlist(sorted),
OrgDb = org.Hs.eg.db,
ont = "BP",
minGSSize = 50,
maxGSSize = 300,
pvalueCutoff = 0.01,
pAdjustMethod = "BH",
qvalueCutoff = 0.01)
results = data.frame(enrich_go$p.adjust,enrich_go$Description,enrich_go$Count)
ordered_results = results[order(results$enrich_go.p.adjust),][1:30,]
ggplot(ordered_results, aes(x=enrich_go.Count, y=reorder(enrich_go.Description, -enrich_go.p.adjust), fill = enrich_go.p.adjust))+
geom_bar(stat = 'identity')
setwd("~/GitHub/LR_project")
gene = read.csv("processed_data/03-LR_network_visualisation/louvain_largest_cluster_0.1.csv", row.names = 1)
genelist = gene$X0
gene.df <- bitr(genelist, fromType = "SYMBOL",
toType = c("ENTREZID"),
OrgDb = org.Hs.eg.db)
sorted = sort(unlist(as.numeric(gene.df$ENTREZID)), decreasing = TRUE)
enrich_go = enrichGO(gene = unlist(sorted),
OrgDb = org.Hs.eg.db,
ont = "BP",
minGSSize = 50,
maxGSSize = 300,
pvalueCutoff = 0.01,
pAdjustMethod = "BH",
qvalueCutoff = 0.01)
results = data.frame(enrich_go$p.adjust,enrich_go$Description,enrich_go$Count)
ordered_results = results[order(results$enrich_go.p.adjust),][1:30,]
ggplot(ordered_results, aes(x=enrich_go.Count, y=reorder(enrich_go.Description, -enrich_go.p.adjust), fill = enrich_go.p.adjust))+
geom_bar(stat = 'identity')
library(clusterProfiler)
library(org.Hs.eg.db)
library(ggplot2)
gene = read.csv("processed_data/03-LR_network_visualisation/louvain_largest_cluster_0.1.csv", row.names = 1)
genelist = gene$X0
gene.df <- bitr(genelist, fromType = "SYMBOL",
toType = c("ENTREZID"),
OrgDb = org.Hs.eg.db)
sorted = sort(unlist(as.numeric(gene.df$ENTREZID)), decreasing = TRUE)
enrich_go = enrichGO(gene = unlist(sorted),
OrgDb = org.Hs.eg.db,
ont = "BP",
minGSSize = 50,
maxGSSize = 300,
pvalueCutoff = 0.01,
pAdjustMethod = "BH",
qvalueCutoff = 0.01)
results = data.frame(enrich_go$p.adjust,enrich_go$Description,enrich_go$Count)
ordered_results = results[order(results$enrich_go.p.adjust),][1:30,]
ggplot(ordered_results, aes(x=enrich_go.Count, y=reorder(enrich_go.Description, -enrich_go.p.adjust), fill = enrich_go.p.adjust))+
geom_bar(stat = 'identity')
