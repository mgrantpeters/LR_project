summary(m)
m = lm(as.formula(data$TS.PUTM ~ data[[x]] + data$RIN + data$Sex))
summary(m)
m = lm(as.formula(data$Age ~ data[[x]] + data$RIN + data$Sex))
summary(m)
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN + data$Sex))
summary(m)
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN))
summary(m)
library(dplyr)
library(broom)
library(lme4)
library(tibble)
data = read.csv("TelomereLength_project/data_input.csv")
for (x in 10:37){
print(colnames(data)[x])
m = lm(as.formula(data$TS.PUTM ~ data[[x]] + data$RIN + data$Sex))
summary(m)
#plot(data[[x]], data$TS.PUTM)
sink(paste0("TelomereLength_project/", colnames(data)[x], "lm-outputs.csv"))
print(colnames(data)[x])
print(summary(m))
sink()
df = glance(m)
df = df %>% add_column(gene = paste(colnames(data)[x]), .before = "r.squared")
if (x==10){
summary = df
} else {
summary = bind_rows(summary, df)
}
}
write.csv(data.frame(summary), 'TelomereLength_project/summary_statistics.csv')
library(dplyr)
library(broom)
library(lme4)
library(tibble)
data = read.csv("TelomereLength_project/data_input.csv")
for (x in 10:37){
print(colnames(data)[x])
m = lm(as.formula(paste(data[[x]]) ~ TS.PUTM + RIN), data = data)
summary(m)
#plot(data[[x]], data$TS.PUTM)
sink(paste0("TelomereLength_project/", colnames(data)[x], "lm-outputs.csv"))
print(colnames(data)[x])
print(summary(m))
sink()
df = glance(m)
df = df %>% add_column(gene = paste(colnames(data)[x]), .before = "r.squared")
if (x==10){
summary = df
} else {
summary = bind_rows(summary, df)
}
}
write.csv(data.frame(summary), 'TelomereLength_project/summary_statistics.csv')
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN))
summary(m)
sink(paste0("TelomereLength_project/age_lm-outputs.csv"))
print(summary(m))
sink()
library(dplyr)
library(broom)
library(lme4)
library(tibble)
data = read.csv("TelomereLength_project/data_input.csv")
for (x in 10:37){
print(colnames(data)[x])
m = lm(as.formula(paste(data[[x]]) ~ TS.PUTM + RIN), data = data)
summary(m)
#plot(data[[x]], data$TS.PUTM)
sink(paste0("TelomereLength_project/", colnames(data)[x], "lm-outputs.csv"))
print(colnames(data)[x])
print(summary(m))
sink()
df = glance(m)
df = df %>% add_column(gene = paste(colnames(data)[x]), .before = "r.squared")
if (x==10){
summary = df
} else {
summary = bind_rows(summary, df)
}
}
write.csv(data.frame(summary), 'TelomereLength_project/summary_statistics.csv')
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN))
summary(m)
sink(paste0("TelomereLength_project/age_lm-outputs.csv"))
print(summary(m))
sink()
m = lm(as.formula(data$TS.PUTM ~ data[[26]] + data$RIN)
summary(m)
library(dplyr)
library(broom)
library(lme4)
library(tibble)
data = read.csv("TelomereLength_project/data_input.csv")
m = lm(as.formula(data$TS.PUTM ~ data[[26]] + data$RIN)
)
summary(m)
lm(as.formula(data$TS.PUTM ~ data[[26]] + data$RIN + data$Sex))
summary(m)
m = lm(as.formula(data$TS.PUTM ~ data[[26]] + data$RIN + data$Sex + data$Age))
summary(m)
m = lm(as.formula(data$TS.PUTM ~ data[[26]] + data$RIN + data$Sex))
summary(m)
colnames(data)[x]
print(colnames(data)[x])
x=26
print(colnames(data)[x])
m = lm(as.formula(data$TS.PUTM ~ data[[26]] + data$RIN + data$Sex + data$Age))
summary(m)
#plot(data[[x]], data$TS.PUTM)
sink(paste0("TelomereLength_project/", colnames(data)[x], "lm-outputs.csv"))
print(colnames(data)[x])
print(summary(m))
sink()
df = glance(m)
df = df %>% add_column(gene = paste(colnames(data)[x]), .before = "r.squared")
df
library(dplyr)
library(broom)
library(lme4)
library(tibble)
data = read.csv("TelomereLength_project/data_input.csv")
for (x in 10:37){
x=26
print(colnames(data)[x])
m = lm(as.formula(data$TS.PUTM ~ data[[26]] + data$RIN + data$Sex + data$Age))
summary(m)
#plot(data[[x]], data$TS.PUTM)
sink(paste0("TelomereLength_project/", colnames(data)[x], "lm-outputs.csv"))
print(colnames(data)[x])
print(summary(m))
sink()
df = glance(m)
df = df %>% add_column(gene = paste(colnames(data)[x]), .before = "r.squared")
if (x==10){
summary = df
} else {
summary = bind_rows(summary, df)
}
}
write.csv(data.frame(summary), 'TelomereLength_project/summary_statistics.csv')
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN + data$Sex))
summary(m)
sink(paste0("TelomereLength_project/age_lm-outputs.csv"))
print(summary(m))
sink()
library(dplyr)
library(broom)
library(lme4)
library(tibble)
data = read.csv("TelomereLength_project/data_input.csv")
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN + data$Sex))
summary(m)
sink(paste0("TelomereLength_project/age_lm-outputs.csv"))
print(summary(m))
sink()
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN + data$Sex))
summary(m)
sink(paste0("TelomereLength_project/age_lm-outputs.csv"))
print(summary(m))
sink()
sink(paste0("TelomereLength_project/age_lm-outputs.csv"))
print(summary(m))
sink()
as.formula(data[[x]]
)
data[[x]])
data[[x]]
data[x]
m = lm(as.formula(data[[x]] ~ data$Age + data$RIN + data$Sex))
summary(m)
sink(paste0("TelomereLength_project/age_lm-outputs.csv"))
print(summary(m))
sink()
full_results$bootstrap_data[,15]
library("EWCE")
library("biomaRt")
library("ggplot2")
set.seed(1234)
load("C:/Users/melis/Downloads/ctd_aibsMultipleCrtxSmrtSeq.rda")  #Load CTD data
n = 10000
#################------------------- Telomere Length
#Load target gene list
TelLength = c("PARP1", "SENP7", "TERC", "MOB1B", "NAF1", "TERT", "PRRC2A", "CARMIL1", "POT1", "STN1", "ATM", "DCAF4", "TERF2", "MPHOSPH6", "RFWD3", "ZNF208", "ZBTB46", "STMN3", "RTEL1")
OxPhos = c("ENO1", "ENO2", "ENO3", "ENTPD5", "GAPDHS", "GAPDH", "GCK", "GPD1", "GPI", "HIF1A", "HK1", "HK2", "HK3", "HTR2A", "IGF1", "INSR", "MYC", "P2RX7", "PFKFB1", "PFKFB2", "PFKFB3", "PFKFB4", "PFKL", "PFKM", "PFKP", "PGAM1", "PGAM2", "PGK1", "PKLR", "PPP2R5D", "PRKAA1", "PRKAA2", "TPI1", "INS", "ALDOA", "ALDOB", "ALDOC", "ARNT", "NDUFA10", "NDUFA1", "NDUFA2", "NDUFA3", "NDUFA4", "NDUFA5", "NDUFA6", "NDUFA7", "NDUFA8", "NDUFA9", "NDUFAB1", "NDUFB10", "NDUFB1", "NDUFB2", "NDUFB3", "NDUFB4", "NDUFB5", "NDUFB6", "NDUFB7", "NDUFB8", "NDUFB9", "NDUFC1", "NDUFC2", "NDUFS4", "NDUFS5", "NDUFS6", "NDUFV3", "NDUFAF1", "NDUFS1", "NDUFS2", "NDUFS3", "NDUFS7", "NDUFS8", "NDUFV1", "NDUFV2", "SDHC", "UQCR10", "UQCRB", "UQCRC1", "UQCRC2", "UQCRH", "COX10", "COX15", "COX4I1", "COX4I2", "COX5A", "COX8A", "COX8C", "ATPF1C", "ATP5F1D", "ATP7A", "LEXM", "CHCHD10", "COQ7", "COQ9", "CYCS", "DLD", "DNAJC15", "FXN", "GADD45GIP1", "NIPSNAP2" , "MECP2", "MLXIPL", "MSH2", "MYOG", "PARK7", "PINK1", "PMPCB", "PPIF", "SDHAF2", "SLC25A23", "SLC25A33", "SNCA", "SURF1", "TAZ", "UQCRHL", "VCP", "ACTN3", "AK2", "APOC3")
TelMaint = c("POT1", "TERF1", "TERF2", "ACD", "TINF2", "TERF2IP", "CTC1", "STN1", "TEN1", "RIF1", "RTEL1", "ZBTB48")
TelBio = c("TERT", "TEP1", "TERC", "WRAP53", "DKC1", "NOP10", "GAR1", "NHP2", "NAF1", "PARN")
Stress = c("FKBP5", "CRH", "HSPA2", "NR3C1", "NR3C2", "PPARA", "PPARG", "PPARD", "RXRA", "NPY", "GPR37")
full_results <- EWCE::bootstrap_enrichment_test(sct_data = ctd,
sctSpecies = "human",
genelistSpecies = "human",
hits = c(TelLength, OxPhos, TelMaint, TelBio, Stress),
reps = n,
annotLevel = 1,
geneSizeControl = TRUE)
hist(full_results$bootstrap_data[,15])
hist(full_results$bootstrap_data[,2])
hist(full_results$bootstrap_data[,3])
hist(full_results$bootstrap_data[,4])
hist(full_results$bootstrap_data[,5])
hist(full_results$bootstrap_data[,6])
hist(full_results$bootstrap_data[,7])
hist(full_results$bootstrap_data[,8])
hist(full_results$bootstrap_data[,9])
hist(full_results$bootstrap_data[,10])
hist(full_results$bootstrap_data[,11])
hist(full_results$bootstrap_data[,12])
hist(full_results$bootstrap_data[,13])
hist(full_results$bootstrap_data[,14])
hist(full_results$bootstrap_data[,15])
hist(full_results$bootstrap_data[,16])
hist(full_results$bootstrap_data[,17])
hist(full_results$bootstrap_data[,18])
n=10
full_results$bootstrap_data[,n]
seq(from = 1, to = 5, by = 1)
for (x in 2:13){
t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
}
for (x in 2:13){
results = t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
print(results)
}
for (n in 2:13){
results = t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
print(results)
}
var.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n])
results
results$p.value
results$p.value/11
results$p.value/100000
full_results$bootstrap_data
full_results
for (n in 2:13){
var.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n])
results = t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
print(results$p.value)
}
for (n in 2:13){
var.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n])
results = t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
print(results$p.value/11)
}
for (n in 2:13){
Fres = var.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n])
print(Fres)
results = t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
print(results$p.value/11)
}
for (n in 2:13){
Fres = var.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n])
print(Fres)
results = t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
print(results$p.value/11)
}
for (n in 2:13){
Fres = var.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n])
print(Fres)
results = t.test(full_results$bootstrap_data[,15], full_results$bootstrap_data[,n],
alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
print(results)
print(results$p.value/11)
}
(.packages())
library("EWCE")
library("biomaRt")
library("ggplot2")
library("grid")
set.seed(1234)
setwd("/Users/melis/Documents/EWCE_bulkRNAseq")
load("C:/Users/melis/Downloads/ctd_aibsMultipleCrtxSmrtSeq.rda")  #Load CTD data
n = 10000
data = read.csv("Frontal_Cortex_Upreg_sig_genes_28.4.23.csv")
list = data[data$genes>0,1]
full_results <- EWCE::bootstrap_enrichment_test(sct_data = ctd,
sctSpecies = "human",
genelistSpecies = "human",
hits = list,
reps = n,                       #Bootstrap repeats set to 10000
annotLevel = 1,                 #Annotation level where 1= major cell types, 2= higher resolution
geneSizeControl = TRUE)         #Control for GC content and gene length
thisResult1 = data.frame(full_results$results)
thisResult1$MajorCellType = unlist(lapply(strsplit(as.character(thisResult1$CellType),'_'), `[[`, 1))
thisResult1$testList = 'cortex'
FinalResult1 = thisResult1
plot_list = EWCE::ewce_plot(total_res = full_results$results,                     #Write plot data with BH correction p vals
mtc_method = "BH",
ctd = ctd)
plot_list$withDendro+ theme(text = element_text(size = 12))+theme(plot.margin=grid::unit(c(0.5,0.5,0.5,0.5), "in"))
ggsave(
filename="plots/EWCE_cortex_bulk_annot1.png",
plot = last_plot(),
device ="png",
scale = 1,
width = 7,
height = 7,
units = c("in"),
dpi = 300
)
write.csv(data.frame(full_results$results), "../processed-data/EWCE_cortex_bulk_annot1.csv", row.names=TRUE, quote=FALSE)
rm(full_results)
rm(plot_list)
full_results <- EWCE::bootstrap_enrichment_test(sct_data = ctd,
sctSpecies = "human",
genelistSpecies = "human",
hits = list,
reps = n,                       #Bootstrap repeats set to 10000
annotLevel = 2,                 #Annotation level where 1= major cell types, 2= higher resolution
geneSizeControl = TRUE)         #Control for GC content and gene length
thisResult = data.frame(full_results$results)
thisResult$MajorCellType = unlist(lapply(strsplit(as.character(thisResult$CellType),'_'), `[[`, 1))
thisResult$testList = 'Cortex'
FinalResult = thisResult
plot_list = EWCE::ewce_plot(total_res = full_results$results,                     #Write plot data with BH correction p vals
mtc_method = "BH",
ctd = ctd)
plot_list$withDendro+ theme(text = element_text(size = 12))+theme(plot.margin=grid::unit(c(0.5,0.5,0.5,0.5), "in"))
ggsave(
filename="plots/EWCE_cortex_bulk_annot2.png",
plot = last_plot(),
device ="png",
scale = 1,
width = 20,
height = 7,
units = c("in"),
dpi = 300
)
write.csv(data.frame(full_results$results), "processed-data/EWCE_cortex_bulk_annot2.csv", row.names=TRUE, quote=FALSE)
rm(full_results)
rm(plot_list)
############-------------------------------- FINAL SAVE and PLOT
write.csv((.packages()), "processed-data/loaded_R_packages.R")
write.csv(FinalResult1, "processed-data/final_results_table_annot1.csv")
sig1 = FinalResult1[FinalResult1$q>0.05,]
FinalResult1 %>%
mutate(CellType = factor(CellType,c("Astrocyte", "Microglia","OPC", "Oligodendrocyte","Vascular_cells","GABAergic_LAMP5","GABAergic_PAX6","GABAergic_PVALB","GABAergic_SST","GABAergic_VIP","Glutamatergic_IT","Glutamatergic_L4_IT","Glutamatergic_L5_ET","Glutamatergic_L5_6_IT_Car3","Glutamatergic_L5_6_NP", "Glutamatergic_L6_CT","Glutamatergic_L6b"))) %>%
ggplot() +
geom_point(aes(x = -log10(q), y = CellType,color = MajorCellType, size = fold_change, alpha = q<0.05))+
scale_alpha_discrete(range=c(0.4,1))+
facet_grid(rows = vars(testList))+
theme(text = element_text(size = 12))+ theme(plot.margin=grid::unit(c(0.5,0.5,0.5,0.5), "in"))+
geom_vline(xintercept=1.3010, linetype="dashed", color = "darkgray") +
xlab("-log10(q)") +
ylab("Cell type") +
coord_flip() + # this is to make  the graph landscape
theme_light() +
viridis::scale_fill_viridis() + ## to make the colour scheme color-blind safe, the parameter option="A" or option="B",etc will change palette
guides(fill = guide_legend(title = "Major Cell Type")) +
theme(axis.line = element_line(colour = "black"),
axis.text = element_text(colour = "black", size = "10"),
axis.text.x = element_text(colour = "black", size = "10", angle=90, hjust=1),
axis.title = element_text(colour = "black", size = "10"),
strip.text = element_text(colour = "black", size = "10"),
legend.text = element_text(colour = "black", size = "10"),
plot.caption = element_text(colour = "black", size = "10"),
plot.title = element_text(colour = "black", size = "10"),
legend.title = element_text(colour = "black", size = "10"),
legend.position = "top",
## This is to plot the two legends in two rows
legend.box="vertical")
ggsave(
filename="plots/Overview_results_annot1.png",
plot = last_plot(),
device ="png",
scale = 1,
width = 8,
height = 7,
units = c("in"),
dpi = 300
)
sig = FinalResult[FinalResult$p<0.05,]
write.csv(FinalResult, "processed-data/final_results_table_annot2.csv")
ggplot(FinalResult) +
geom_point(aes(x = -log10(q), y = CellType, color = MajorCellType, size = fold_change, alpha = q<0.05))+
scale_alpha_discrete(range=c(0.4,1))+
facet_grid(rows = vars(testList))+
theme(text = element_text(size = 12))+ theme(plot.margin=grid::unit(c(0.5,0.5,0.5,0.5), "in"))+
geom_vline(xintercept=1.3010, linetype="dashed", color = "darkgray") +
xlab("-log10(q)") +
ylab("Cell type") +
coord_flip() + # this is to make  the graph landscape
theme_light() +
viridis::scale_fill_viridis() + ## to make the colour scheme color-blind safe, the parameter option="A" or option="B",etc will change palette
guides(fill = guide_legend(title = "Major Cell Type")) +
theme(axis.line = element_line(colour = "black"),
axis.text = element_text(colour = "black", size = "10"),
axis.text.x = element_text(colour = "black", size = "10", angle=90, hjust=1),
axis.title = element_text(colour = "black", size = "10"),
strip.text = element_text(colour = "black", size = "10"),
legend.text = element_text(colour = "black", size = "10"),
plot.caption = element_text(colour = "black", size = "10"),
plot.title = element_text(colour = "black", size = "10"),
legend.title = element_text(colour = "black", size = "10"),
legend.position = "top",
## This is to plot the two legends in two rows
legend.box="vertical")
ggsave(
filename="plots/Overview_results_ann2.png",
plot = last_plot(),
device ="png",
scale = 1,
width = 22,
height = 15,
units = c("in"),
dpi = 300
)
library("dplyr")
FinalResult1 %>%
mutate(CellType = factor(CellType,c("Astrocyte", "Microglia","OPC", "Oligodendrocyte","Vascular_cells","GABAergic_LAMP5","GABAergic_PAX6","GABAergic_PVALB","GABAergic_SST","GABAergic_VIP","Glutamatergic_IT","Glutamatergic_L4_IT","Glutamatergic_L5_ET","Glutamatergic_L5_6_IT_Car3","Glutamatergic_L5_6_NP", "Glutamatergic_L6_CT","Glutamatergic_L6b"))) %>%
ggplot() +
geom_point(aes(x = -log10(q), y = CellType,color = MajorCellType, size = fold_change, alpha = q<0.05))+
scale_alpha_discrete(range=c(0.4,1))+
facet_grid(rows = vars(testList))+
theme(text = element_text(size = 12))+ theme(plot.margin=grid::unit(c(0.5,0.5,0.5,0.5), "in"))+
geom_vline(xintercept=1.3010, linetype="dashed", color = "darkgray") +
xlab("-log10(q)") +
ylab("Cell type") +
coord_flip() + # this is to make  the graph landscape
theme_light() +
viridis::scale_fill_viridis() + ## to make the colour scheme color-blind safe, the parameter option="A" or option="B",etc will change palette
guides(fill = guide_legend(title = "Major Cell Type")) +
theme(axis.line = element_line(colour = "black"),
axis.text = element_text(colour = "black", size = "10"),
axis.text.x = element_text(colour = "black", size = "10", angle=90, hjust=1),
axis.title = element_text(colour = "black", size = "10"),
strip.text = element_text(colour = "black", size = "10"),
legend.text = element_text(colour = "black", size = "10"),
plot.caption = element_text(colour = "black", size = "10"),
plot.title = element_text(colour = "black", size = "10"),
legend.title = element_text(colour = "black", size = "10"),
legend.position = "top",
## This is to plot the two legends in two rows
legend.box="vertical")
ggsave(
filename="plots/Overview_results_annot1.png",
plot = last_plot(),
device ="png",
scale = 1,
width = 8,
height = 7,
units = c("in"),
dpi = 300
)
library("EWCE")
library("biomaRt")
library("ggplot2")
library("grid")
library("dplyr")
set.seed(1234)
setwd("/Users/melis/Documents/GitHub/LR_project/")
data = read.csv("processed_data/LR_occurance.csv")
data %>%
mutate(Disease = factor(Disease, levels=rev(c("AD", "ALS", "EssentialTremor", "FrontotemporalDementia", "LBD","PD","ProgressiveSupranuclearPalsy","AnorexiaNervosa", "BipolarDisorder", "MajorDepressiveDisorder", "NeuroticDisorder", "OCD", "Schizophrenia", "TouretteSyndrome", "UnipolarDepression", "BrainAneurysm", "IntracranialHemorrhage", "MigraineDisorder", "MigraineWithAura", "MS", "NarcolepsyCataplexy", "Narcolepsy", "PartialEpilepsy", "RestlessLeg")))) %>%
ggplot() +
geom_point(aes(x = -log10(pval), y = Disease,color = Disease, size = perc.LR, alpha = pval<0.05), show.legend = FALSE)+
scale_alpha_discrete(range=c(0.4,1))+
facet_grid(cols = vars(LR))+
theme(text = element_text(size = 12))+ theme(plot.margin=grid::unit(c(0.5,0.5,0.5,0.5), "in"))+
geom_vline(xintercept=1.3010, linetype="dashed", color = "darkgray") +
xlab("-log10(p)") +
ylab("Disease") +
#coord_flip() + # this is to make  the graph landscape
theme_light() +
viridis::scale_fill_viridis() + ## to make the colour scheme color-blind safe, the parameter option="A" or option="B",etc will change palette
#guides(fill = guide_legend(title = "Disease")) +
theme(axis.line = element_line(colour = "black"),
axis.text = element_text(colour = "black", size = "10"),
axis.text.x = element_text(colour = "black", size = "10", angle=90, hjust=1),
axis.title = element_text(colour = "black", size = "10"),
strip.text = element_text(colour = "black", size = "10"),
#legend.text = element_text(colour = "black", size = "10"),
plot.caption = element_text(colour = "black", size = "10"),
plot.title = element_text(colour = "black", size = "10"))
#legend.title = element_text(colour = "black", size = "10"),
#legend.position = "top",
## This is to plot the two legends in two rows
#legend.box="vertical")
ggsave(
filename="plots/LR_occurance_per_disease.png",
plot = last_plot(),
device ="png",
scale = 1,
width = 7,
height = 8,
units = c("in"),
dpi = 300
)
